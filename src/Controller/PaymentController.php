<?php

namespace Drupal\campaign_kit\Controller;

use Drupal\Core\Controller\ControllerBase;

use Drupal\campaign_kit\PaymentProcessorPluginManager;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class PaymentController.
 */
class PaymentController extends ControllerBase {

  /**
   * The payment processor plugin manager
   *
   * We use this to get all of payment processor plugins.
   *
   */
  protected $paymentProcessorManager;

  /**
   * PaymentController constructor.
   *
   * @param \Drupal\campaign_kit\PaymentProcessorPluginManager $paymentProcessorPluginManager
   */
  public function __construct(PaymentProcessorPluginManager $paymentProcessorPluginManager) {
    $this->paymentProcessorManager = $paymentProcessorPluginManager;
  }


  /**
   * Get all plugin in Campaign Kit
   */
  public function getPlugins(){
    $build = [];
    $build['intro'] = [
      '#markup' => t("This page list the payment processor plugins we've created.")
    ];

    // Get the list of all the payment processor plugins defined on the system from the
    // plugin manager. Note that at this point, what we have is *definitions* of
    // plugins, not the plugins themselves.
    $paymentProcessorDefinitions = $this->paymentProcessorManager->getDefinitions();
    //dump($paymentProcessorDefinitions);
    $items = [];
    // Let's output a list of the plugin definitions we now have
    foreach ($paymentProcessorDefinitions as $paymentProcessorDefinition){
      $items[] = t("@id (description: @description, account ID: @accountId)", [
        '@id' => $paymentProcessorDefinition['id'],
        '@description' => $paymentProcessorDefinition['description'],
        '@accountId' => $paymentProcessorDefinition['accountId'],
      ]);
    }

    // Add our list to the render array.
    $build['plugin_definitions'] = [
      '#theme' => 'item_list',
      '#title' => 'Payment Processor plugin definitions',
      '#items' => $items
    ];

    $items = [];
    foreach ($paymentProcessorDefinitions as $pluginId => $paymentProcessorDefinition){
      $plugin = $this->paymentProcessorManager->createInstance($pluginId, ['of' => 'configuration values']);
      //dump($plugin);
      $items['description'] = $plugin->description();
      $items['currency'] = $plugin->getCurrency();
    }



    $build['plugins'] = [
      '#theme' => 'item_list',
      '#title' => 'Payment Processor plugins',
      '#items' => $items
    ];

    return $build;
    // Getting values from PayPal plugin
    //dump($this->paymentProcessorManager->createInstance());

  }

  public static function create(ContainerInterface $container) {
    //return parent::create($container); // TODO: Change the autogenerated stub
    return new static($container->get('plugin.manager.payment_processor'));
  }

}
